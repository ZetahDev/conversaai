---
import DashboardLayout from '@/layouts/DashboardLayout.astro';

// Verificar autenticación
const token = Astro.cookies.get('access_token');
if (!token) {
  return Astro.redirect('/login');
}

// Obtener datos del usuario y chatbots
let user: any = null;
let company: any = null;
let chatbots: any[] = [];

try {
  // Obtener información del usuario
  const userResponse = await fetch('http://localhost:8000/api/v1/auth/me', {
    headers: {
      'Authorization': `Bearer ${token.value}`,
      'Content-Type': 'application/json',
    },
  });

  if (userResponse.ok) {
    user = await userResponse.json();
  } else {
    Astro.cookies.delete('access_token');
    return Astro.redirect('/login');
  }

  // Obtener información de la empresa
  const companyResponse = await fetch('http://localhost:8000/api/v1/companies/me', {
    headers: {
      'Authorization': `Bearer ${token.value}`,
      'Content-Type': 'application/json',
    },
  });

  if (companyResponse.ok) {
    company = await companyResponse.json();
  }

  // Obtener chatbots
  const chatbotsResponse = await fetch('http://localhost:8000/api/v1/chatbots/', {
    headers: {
      'Authorization': `Bearer ${token.value}`,
      'Content-Type': 'application/json',
    },
  });

  if (chatbotsResponse.ok) {
    const chatbotsData = await chatbotsResponse.json();
    chatbots = chatbotsData.items || [];
  }

} catch (error) {
  console.error('Error obteniendo datos:', error);
}

// Manejar logout
if (Astro.request.method === 'POST' && Astro.url.searchParams.get('action') === 'logout') {
  Astro.cookies.delete('access_token');
  return Astro.redirect('/login');
}
---

<DashboardLayout title="Chatbots - ChatBot SAAS" user={user} company={company}>
  <!-- Header -->
  <div class="px-4 py-6 sm:px-0">
    <div class="flex justify-between items-center">
      <div>
        <h1 class="text-3xl font-bold text-gray-900 dark:text-white">
          Mis Chatbots
        </h1>
        <p class="mt-2 text-gray-600 dark:text-gray-400">
          Gestiona y configura todos tus chatbots desde aquí.
        </p>
      </div>
      <a href="/chatbots/create" class="bg-blue-600 hover:bg-blue-700 text-white px-6 py-3 rounded-lg text-sm font-medium flex items-center space-x-2">
        <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
        </svg>
        <span>Crear Nuevo Chatbot</span>
      </a>
    </div>
  </div>

  <!-- Chatbots Grid -->
  <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
    {chatbots.length === 0 ? (
      <div class="col-span-full">
        <div class="text-center py-12">
          <svg class="mx-auto h-12 w-12 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z" />
          </svg>
          <h3 class="mt-2 text-sm font-medium text-gray-900 dark:text-white">No hay chatbots</h3>
          <p class="mt-1 text-sm text-gray-500 dark:text-gray-400">
            Comienza creando tu primer chatbot para automatizar las conversaciones con tus clientes.
          </p>
          <div class="mt-6">
            <a href="/chatbots/create" class="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-md text-sm font-medium">
              Crear mi primer chatbot
            </a>
          </div>
        </div>
      </div>
    ) : (
      chatbots.map((chatbot: any) => (
        <div class="bg-white dark:bg-gray-800 overflow-hidden shadow rounded-lg hover:shadow-lg transition-shadow">
          <div class="p-6">
            <div class="flex items-center">
              <div class="flex-shrink-0">
                <div class="w-12 h-12 bg-blue-100 dark:bg-blue-900 rounded-lg flex items-center justify-center">
                  <svg class="w-8 h-8 text-blue-600 dark:text-blue-400" fill="currentColor" viewBox="0 0 24 24">
                    <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"/>
                  </svg>
                </div>
              </div>
              <div class="ml-4 flex-1">
                <h3 class="text-lg font-medium text-gray-900 dark:text-white">
                  {chatbot.name}
                </h3>
                <p class="text-sm text-gray-500 dark:text-gray-400">
                  {chatbot.description}
                </p>
              </div>
            </div>
            
            <div class="mt-4">
              <div class="flex items-center justify-between">
                <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200">
                  {chatbot.status}
                </span>
                <span class="text-xs text-gray-500 dark:text-gray-400">
                  Modelo: {chatbot.model}
                </span>
              </div>
            </div>

            <div class="mt-6 flex space-x-3">
              <a
                href={`/chatbots/${chatbot.id}/edit`}
                class="flex-1 bg-blue-600 hover:bg-blue-700 text-white px-3 py-2 rounded-md text-sm font-medium text-center transition-colors duration-200"
              >
                Configurar
              </a>
              <a
                href={`/chatbots/${chatbot.id}/chat`}
                class="flex-1 bg-gray-100 hover:bg-gray-200 dark:bg-gray-700 dark:hover:bg-gray-600 text-gray-700 dark:text-gray-300 px-3 py-2 rounded-md text-sm font-medium text-center transition-colors duration-200"
              >
                Ver Chat
              </a>
            </div>
          </div>
        </div>
      ))
    )}
  </div>
</DashboardLayout>
