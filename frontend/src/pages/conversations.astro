---
import DashboardLayout from '@/layouts/DashboardLayout.astro';

// Verificar autenticación
const token = Astro.cookies.get('access_token');
if (!token) {
  return Astro.redirect('/login');
}

// Obtener datos del usuario y conversaciones
let user: any = null;
let company: any = null;
let conversations: any[] = [];

try {
  // Obtener información del usuario
  const userResponse = await fetch('http://localhost:8000/api/v1/auth/me', {
    headers: {
      'Authorization': `Bearer ${token.value}`,
      'Content-Type': 'application/json',
    },
  });

  if (userResponse.ok) {
    user = await userResponse.json();
  } else {
    Astro.cookies.delete('access_token');
    return Astro.redirect('/login');
  }

  // Obtener información de la empresa
  const companyResponse = await fetch('http://localhost:8000/api/v1/companies/me', {
    headers: {
      'Authorization': `Bearer ${token.value}`,
      'Content-Type': 'application/json',
    },
  });

  if (companyResponse.ok) {
    company = await companyResponse.json();
  }

  // Obtener conversaciones
  const conversationsResponse = await fetch('http://localhost:8000/api/v1/conversations/', {
    headers: {
      'Authorization': `Bearer ${token.value}`,
      'Content-Type': 'application/json',
    },
  });

  if (conversationsResponse.ok) {
    const conversationsData = await conversationsResponse.json();
    conversations = conversationsData.items || [];
  }

} catch (error) {
  console.error('Error obteniendo datos:', error);
}

// Manejar logout
if (Astro.request.method === 'POST' && Astro.url.searchParams.get('action') === 'logout') {
  Astro.cookies.delete('access_token');
  return Astro.redirect('/login');
}
---

<DashboardLayout title="Conversaciones - ConversaAI" user={user} company={company}>
  <!-- Header -->
  <div class="px-4 py-6 sm:px-0">
    <div class="flex justify-between items-center">
      <div>
        <h1 class="text-3xl font-bold text-gray-900 dark:text-white">
          Conversaciones
        </h1>
        <p class="mt-2 text-gray-600 dark:text-gray-400">
          Revisa todas las conversaciones de tus chatbots.
        </p>
      </div>
      <div class="flex space-x-3">
        <select class="bg-white dark:bg-gray-800 border border-gray-300 dark:border-gray-600 rounded-md px-3 py-2 text-sm">
          <option>Todas las conversaciones</option>
          <option>Conversaciones activas</option>
          <option>Conversaciones completadas</option>
        </select>
        <button class="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-md text-sm font-medium">
          Exportar
        </button>
      </div>
    </div>
  </div>

  <!-- Lista de Conversaciones -->
  <div class="bg-white dark:bg-gray-800 shadow overflow-hidden sm:rounded-md">
    <ul class="divide-y divide-gray-200 dark:divide-gray-700">
      {conversations.length === 0 ? (
        <li class="px-4 py-6 text-center">
          <div class="text-gray-500 dark:text-gray-400">
            <svg class="mx-auto h-12 w-12 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 8h2a2 2 0 012 2v6a2 2 0 01-2 2h-2v4l-4-4H9a1.994 1.994 0 01-1.414-.586m0 0L11 14h4a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2v4l.586-.586z" />
            </svg>
            <h3 class="mt-2 text-sm font-medium text-gray-900 dark:text-white">No hay conversaciones</h3>
            <p class="mt-1 text-sm text-gray-500 dark:text-gray-400">
              Las conversaciones aparecerán aquí cuando los usuarios interactúen con tus chatbots.
            </p>
          </div>
        </li>
      ) : (
        conversations.map((conversation: any) => (
          <li class="px-4 py-4 hover:bg-gray-50 dark:hover:bg-gray-700">
            <div class="flex items-center justify-between">
              <div class="flex items-center">
                <div class="flex-shrink-0">
                  <div class="w-10 h-10 bg-blue-100 dark:bg-blue-900 rounded-full flex items-center justify-center">
                    <svg class="w-6 h-6 text-blue-600 dark:text-blue-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
                    </svg>
                  </div>
                </div>
                <div class="ml-4">
                  <div class="text-sm font-medium text-gray-900 dark:text-white">
                    Usuario: {conversation.user_id || 'Anónimo'}
                  </div>
                  <div class="text-sm text-gray-500 dark:text-gray-400">
                    Chatbot: {conversation.chatbot_name || 'Sin nombre'}
                  </div>
                  <div class="text-xs text-gray-400 dark:text-gray-500">
                    {conversation.created_at ? new Date(conversation.created_at).toLocaleString() : 'Fecha no disponible'}
                  </div>
                </div>
              </div>
              <div class="flex items-center space-x-4">
                <div class="text-right">
                  <div class="text-sm text-gray-500 dark:text-gray-400">
                    {conversation.message_count || 0} mensajes
                  </div>
                  <span class={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${
                    conversation.status === 'ACTIVE' 
                      ? 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200'
                      : conversation.status === 'COMPLETED'
                      ? 'bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200'
                      : 'bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-300'
                  }`}>
                    {conversation.status || 'UNKNOWN'}
                  </span>
                </div>
                <button class="text-blue-600 hover:text-blue-800 dark:text-blue-400 dark:hover:text-blue-300 text-sm font-medium">
                  Ver detalles
                </button>
              </div>
            </div>
          </li>
        ))
      )}
    </ul>
  </div>

  <!-- Paginación -->
  {conversations.length > 0 && (
    <div class="bg-white dark:bg-gray-800 px-4 py-3 flex items-center justify-between border-t border-gray-200 dark:border-gray-700 sm:px-6 mt-6 rounded-lg shadow">
      <div class="flex-1 flex justify-between sm:hidden">
        <button class="relative inline-flex items-center px-4 py-2 border border-gray-300 dark:border-gray-600 text-sm font-medium rounded-md text-gray-700 dark:text-gray-300 bg-white dark:bg-gray-800 hover:bg-gray-50 dark:hover:bg-gray-700">
          Anterior
        </button>
        <button class="ml-3 relative inline-flex items-center px-4 py-2 border border-gray-300 dark:border-gray-600 text-sm font-medium rounded-md text-gray-700 dark:text-gray-300 bg-white dark:bg-gray-800 hover:bg-gray-50 dark:hover:bg-gray-700">
          Siguiente
        </button>
      </div>
      <div class="hidden sm:flex-1 sm:flex sm:items-center sm:justify-between">
        <div>
          <p class="text-sm text-gray-700 dark:text-gray-300">
            Mostrando <span class="font-medium">1</span> a <span class="font-medium">{conversations.length}</span> de{' '}
            <span class="font-medium">{conversations.length}</span> resultados
          </p>
        </div>
        <div>
          <nav class="relative z-0 inline-flex rounded-md shadow-sm -space-x-px" aria-label="Pagination">
            <button class="relative inline-flex items-center px-2 py-2 rounded-l-md border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-800 text-sm font-medium text-gray-500 dark:text-gray-400 hover:bg-gray-50 dark:hover:bg-gray-700">
              <span class="sr-only">Anterior</span>
              <svg class="h-5 w-5" fill="currentColor" viewBox="0 0 20 20">
                <path fill-rule="evenodd" d="M12.707 5.293a1 1 0 010 1.414L9.414 10l3.293 3.293a1 1 0 01-1.414 1.414l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 0z" clip-rule="evenodd" />
              </svg>
            </button>
            <button class="relative inline-flex items-center px-4 py-2 border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-800 text-sm font-medium text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-700">
              1
            </button>
            <button class="relative inline-flex items-center px-2 py-2 rounded-r-md border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-800 text-sm font-medium text-gray-500 dark:text-gray-400 hover:bg-gray-50 dark:hover:bg-gray-700">
              <span class="sr-only">Siguiente</span>
              <svg class="h-5 w-5" fill="currentColor" viewBox="0 0 20 20">
                <path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd" />
              </svg>
            </button>
          </nav>
        </div>
      </div>
    </div>
  )}
</DashboardLayout>
