version: '3.8'

services:
  # Base de datos PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: chatbot-postgres
    environment:
      POSTGRES_DB: chatbot_production
      POSTGRES_USER: chatbot_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/scripts/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    restart: unless-stopped
    networks:
      - chatbot-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U chatbot_user -d chatbot_production"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis para cache y sesiones
  redis:
    image: redis:7-alpine
    container_name: chatbot-redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    restart: unless-stopped
    networks:
      - chatbot-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: chatbot-backend
    environment:
      - DATABASE_URL=postgresql://chatbot_user:${POSTGRES_PASSWORD}@postgres:5432/chatbot_production
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - SECRET_KEY=${SECRET_KEY}
      - ENVIRONMENT=production
    volumes:
      - ./backend/logs:/app/logs
      - ./backend/uploads:/app/uploads
      - ./backend/.env.production:/app/.env
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - chatbot-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend (Astro)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
    container_name: chatbot-frontend
    environment:
      - NODE_ENV=production
      - API_URL=http://backend:8000
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./ssl:/etc/ssl/certs
    depends_on:
      - backend
    restart: unless-stopped
    networks:
      - chatbot-network

  # Nginx como reverse proxy
  nginx:
    image: nginx:alpine
    container_name: chatbot-nginx
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/ssl/certs
      - ./nginx/logs:/var/log/nginx
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - backend
      - frontend
    restart: unless-stopped
    networks:
      - chatbot-network

  # Celery Worker para tareas asíncronas
  celery-worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: chatbot-celery-worker
    command: poetry run celery -A app.core.celery worker --loglevel=info
    environment:
      - DATABASE_URL=postgresql://chatbot_user:${POSTGRES_PASSWORD}@postgres:5432/chatbot_production
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - CELERY_BROKER_URL=redis://:${REDIS_PASSWORD}@redis:6379/1
      - CELERY_RESULT_BACKEND=redis://:${REDIS_PASSWORD}@redis:6379/2
    volumes:
      - ./backend/logs:/app/logs
      - ./backend/.env.production:/app/.env
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    networks:
      - chatbot-network

  # Celery Beat para tareas programadas
  celery-beat:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: chatbot-celery-beat
    command: poetry run celery -A app.core.celery beat --loglevel=info
    environment:
      - DATABASE_URL=postgresql://chatbot_user:${POSTGRES_PASSWORD}@postgres:5432/chatbot_production
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - CELERY_BROKER_URL=redis://:${REDIS_PASSWORD}@redis:6379/1
    volumes:
      - ./backend/logs:/app/logs
      - ./backend/.env.production:/app/.env
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    networks:
      - chatbot-network

  # Prometheus para métricas
  prometheus:
    image: prom/prometheus:latest
    container_name: chatbot-prometheus
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    restart: unless-stopped
    networks:
      - chatbot-network

  # Grafana para visualización
  grafana:
    image: grafana/grafana:latest
    container_name: chatbot-grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    ports:
      - "3000:3000"
    restart: unless-stopped
    networks:
      - chatbot-network

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  chatbot-network:
    driver: bridge
