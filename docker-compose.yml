version: '3.8'

services:
  # Base de datos PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: chatbot_postgres
    environment:
      POSTGRES_DB: chatbot_db
      POSTGRES_USER: chatbot_user
      POSTGRES_PASSWORD: chatbot_pass
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/scripts/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - chatbot_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U chatbot_user -d chatbot_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis para caché y sesiones
  redis:
    image: redis:7-alpine
    container_name: chatbot_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - chatbot_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru

  # MinIO para almacenamiento de archivos (alternativa a S3)
  minio:
    image: minio/minio:latest
    container_name: chatbot_minio
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    networks:
      - chatbot_network
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # Qdrant Vector Database (alternativa a Pinecone)
  qdrant:
    image: qdrant/qdrant:latest
    container_name: chatbot_qdrant
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - qdrant_data:/qdrant/storage
    networks:
      - chatbot_network
    environment:
      QDRANT__SERVICE__HTTP_PORT: 6333
      QDRANT__SERVICE__GRPC_PORT: 6334
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API (FastAPI)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    container_name: chatbot_backend
    environment:
      - DATABASE_URL=postgresql://chatbot_user:chatbot_pass@postgres:5432/chatbot_db
      - DATABASE_URL_ASYNC=postgresql+asyncpg://chatbot_user:chatbot_pass@postgres:5432/chatbot_db
      - REDIS_URL=redis://redis:6379/0
      - QDRANT_URL=http://qdrant:6333
      - MINIO_ENDPOINT=minio:9000
      - DEBUG=true
      - RELOAD=true
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
      - backend_logs:/app/logs
    networks:
      - chatbot_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Celery Worker para tareas asíncronas
  celery_worker:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    container_name: chatbot_celery_worker
    environment:
      - DATABASE_URL=postgresql://chatbot_user:chatbot_pass@postgres:5432/chatbot_db
      - DATABASE_URL_ASYNC=postgresql+asyncpg://chatbot_user:chatbot_pass@postgres:5432/chatbot_db
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
    volumes:
      - ./backend:/app
      - celery_logs:/app/logs
    networks:
      - chatbot_network
    depends_on:
      - postgres
      - redis
      - backend
    command: celery -A app.services.celery_app worker --loglevel=info
    restart: unless-stopped

  # Celery Beat para tareas programadas
  celery_beat:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    container_name: chatbot_celery_beat
    environment:
      - DATABASE_URL=postgresql://chatbot_user:chatbot_pass@postgres:5432/chatbot_db
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
    volumes:
      - ./backend:/app
      - celery_beat_data:/app/celerybeat-schedule
    networks:
      - chatbot_network
    depends_on:
      - postgres
      - redis
      - backend
    command: celery -A app.services.celery_app beat --loglevel=info
    restart: unless-stopped

  # Flower para monitoreo de Celery
  flower:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    container_name: chatbot_flower
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
    ports:
      - "5555:5555"
    networks:
      - chatbot_network
    depends_on:
      - redis
    command: celery -A app.services.celery_app flower --port=5555
    restart: unless-stopped

  # Frontend (Astro) - Solo en desarrollo
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: chatbot_frontend
    environment:
      - PUBLIC_API_URL=http://localhost:8000
      - NODE_ENV=development
    ports:
      - "4321:4321"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    networks:
      - chatbot_network
    depends_on:
      - backend
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  minio_data:
    driver: local
  qdrant_data:
    driver: local
  backend_logs:
    driver: local
  celery_logs:
    driver: local
  celery_beat_data:
    driver: local

networks:
  chatbot_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
